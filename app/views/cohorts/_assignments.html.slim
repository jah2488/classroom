.card.grey.darken-2
  .card-content.white-text
    span.card-title Assignments
    nav.grey
      .nav-wrapper
        ul
          li = active_link_to "All",        params.merge(filter: :all)
          li = active_link_to "Incomplete", params.merge(filter: :incomplete)
          li = active_link_to "Complete",   params.merge(filter: :complete)
          li = active_link_to "Late",       params.merge(filter: :late)
          - if Assignment.current_for(student)
            li = active_link_to "Current Assignment", assignment_path(Assignment.current_for(student))
    = react_component('SearchAssignments', {}, tag: 'span' )
    ul.collapsible.black-text.popout
      li.full-width
        .collapsible-header
          i.material-icons.left language
          | Icon Reference
        .collapsible-body.white
          ul.collection
            - icon_definitions.each do |icon, message|
              li.collection-item
                i.material-icons.left = icon
                = message

      - assignments.each do |assignment|
        - submissions = assignment.submissions_for(student)
        li.full-width
          .collapsible-header
            - if submissions.any? { |s| has_feedback?(s) }
              i.material-icons announcement
            - else
              i.material-icons chat_bubble_outline

            - if assignment.completed_by? student
              i.material-icons done
            - elsif assignment.pending_by? student
              i.material-icons code
            - elsif assignment.incomplete_by? student
              i.material-icons not_interested
            - elsif assignment.late?
              i.material-icons report_problem
            - else
              i.material-icons assignment
            = link_to assignment.title, assignment
            '  due
            strong = react_time(assignment.due_date)
          .collapsible-body.white
            - if submissions.empty?
              p Not submitted yet.
            - else
              ul.collection
                - submissions.map(&:decorate).each do |submission|
                  li.collection-item
                    = link_to submission_path(submission) do
                      - if has_feedback?(submission)
                        i.material-icons.left announcement
                      - else
                        i.material-icons.left chat_bubble_outline
                    = "Submitted #{submission.on_time} At #{submission.created}. "
                    strong = submission.label
                    = link_to submission_path(submission) do
                      i.material-icons.right input

            p = link_to new_submission_path(assignment: assignment.id), class: "btn" do
             | Submit
             i.material-icons.right send
